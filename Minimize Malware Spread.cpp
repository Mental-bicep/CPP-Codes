class Solution {
public:
    int find(int x,vector<int> &par)
    {
        if(x==par[x]) return x;
        return par[x]=find(par[x],par);
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        vector<int> par(graph.size()),rank(graph.size(),1);
        for(int i=0;i<par.size();++i) par[i]=i;
        for(int i=0;i<graph.size();++i)
        {
            for(int j=0;j<graph[0].size();++j)
             if(graph[i][j]==1){
                 int lx=find(i,par);
                 int ly=find(j,par);
                 if(lx!=ly)
                 {
                     if(rank[lx]>rank[ly]) par[ly]=lx,rank[lx]+=rank[ly];
                     else{
                         par[lx]=ly;
                         rank[ly]+=rank[lx];
                     }
                 }
             }
        }
        unordered_map<int,int> mp1;
        for(int ele:initial){
            int lx=find(ele,par);
            ++mp1[lx];
        }  
        int ans=-1,maxsize=-1;
        for(int ele:initial)
        {
            int lx=find(ele,par);
            if(mp1[lx]>1) continue;
            // cout<<"ele= "<<ele<<" rank= "<<rank[lx]<<"\n";
            if(rank[lx]>maxsize){
                maxsize=rank[lx];
                ans=ele;
            }
            else if(rank[lx]==maxsize and ele<ans){
                ans=ele;
            }
        }
        if(ans==-1) return *min_element(initial.begin(),initial.end());
        return ans;
    }
};
